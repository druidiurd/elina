import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import firebase_admin
from firebase_admin import credentials, firestore

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config import TELEGRAM_BOT_TOKEN, FIREBASE_KEY_PATH

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
cred = credentials.Certificate(FIREBASE_KEY_PATH)
firebase_admin.initialize_app(cred)
db = firestore.client()

# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥—É–ª—ñ–≤ (–ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Firebase)
from modules.activity_tracker import ActivityTracker
from modules.user_manager import UserManager, init_db

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –º–æ–¥—É–ª—ñ–≤
init_db(db)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–∫–µ—Ä–∞
tracker = ActivityTracker()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = await UserManager.get_or_create_user(message.from_user)

    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤—ñ—Ç, {user['first_name']}!

–Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–µ–Ω—ñ, —â–æ —Ç–∏ —Ä–æ–±–∏—à, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "12:45 —Ä–æ–±–ª—é –æ–±—ñ–¥, –∫—É—Ä–∫—É —ñ –º–∞–∫–∞—Ä–æ–Ω"
‚Ä¢ "14:00 –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
‚Ä¢ "15:30 –∑—Ä–æ–±–∏–≤ 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å"

–ö–æ–º–∞–Ω–¥–∏:
/help - –¥–æ–ø–æ–º–æ–≥–∞
/summary - –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    """

    await message.answer(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/summary - –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è/—Ç–∏–∂–Ω—è
/stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/diet - –∞–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É
/exercise - –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ!
    """

    await message.answer(help_text, parse_mode="Markdown")

@dp.message()
async def handle_activity(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        user = await UserManager.get_or_create_user(message.from_user)
        activity_data = await tracker.detect_activity_type(message.text)

        await UserManager.save_activity(
            str(message.from_user.id),
            activity_data,
            message.text
        )

        response = f"‚úÖ –ó–∞–ø–∏—Å–∞–≤: {activity_data['type']}"
        if activity_data['subtype']:
            response += f" ({activity_data['subtype']})"

        if activity_data['type'] == 'meal' and activity_data['details'].get('food_items'):
            foods = ', '.join(activity_data['details']['food_items'])
            response += f"\nüçΩ –ü—Ä–æ–¥—É–∫—Ç–∏: {foods}"

        elif activity_data['type'] == 'exercise':
            if activity_data['details'].get('repetitions'):
                response += f"\nüí™ {activity_data['details']['repetitions']} –ø–æ–≤—Ç–æ—Ä–µ–Ω—å"

        elif activity_data['type'] == 'drink':
            drink_type = activity_data['details'].get('drink_type', '–Ω–∞–ø—ñ–π')
            amount = activity_data['details'].get('amount', 1)
            response += f"\nü•§ {amount} {drink_type}"

        await message.answer(response)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())