import asyncio
import logging
from datetime import datetime, timedelta
import pytz
import re
from typing import Dict, List, Optional
import csv
import io

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile
import firebase_admin
from firebase_admin import credentials, firestore
import requests
import json
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

import os
from config import Config

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_BOT_TOKEN = Config.TELEGRAM_BOT_TOKEN
ABACUS_API_KEY = Config.ABACUS_API_KEY
ABACUS_API_URL = Config.ABACUS_API_URL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –ú—ñ–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂—ñ ---
CHALLENGES = [
    "–ó—Ä–æ–±–∏ 10 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å!",
    "–í–∏–ø–∏–π —Å–∫–ª—è–Ω–∫—É –≤–æ–¥–∏.",
    "–ó—Ä–æ–±–∏ 5-—Ö–≤–∏–ª–∏–Ω–Ω—É –ø–µ—Ä–µ—Ä–≤—É –¥–ª—è —Ä–æ–∑—Ç—è–∂–∫–∏.",
    "–ü—Ä–æ–π–¥–∏—Å—è –∫—ñ–º–Ω–∞—Ç–æ—é.",
    "–ù–∞–ø–∏—à–∏ 3 —Ä–µ—á—ñ, –∑–∞ —è–∫—ñ —Ç–∏ –≤–¥—è—á–Ω–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ.",
    "–í–∏–∫–æ–Ω–∞–π 10 –≤—ñ–¥–∂–∏–º–∞–Ω—å.",
    "–ó—Ä–æ–±–∏ 10 –≥–ª–∏–±–æ–∫–∏—Ö –≤–¥–∏—Ö—ñ–≤.",
    "–ü–æ–≥–ª—è–Ω—å —É –≤—ñ–∫–Ω–æ —ñ –≤—ñ–¥–ø–æ—á–∏–Ω—å –æ—á–∏–º–∞ 1 —Ö–≤–∏–ª–∏–Ω—É."
]

class ActivityTracker:
    def __init__(self):
        self.activity_types = {
            'meal': ['—ó–º', '–æ–±—ñ–¥', '—Å–Ω—ñ–¥–∞–Ω–æ–∫', '–≤–µ—á–µ—Ä—è', '–ø–µ—Ä–µ–∫—É—Å', '–≥–æ—Ç—É—é', '—Ä–æ–±–ª—é –æ–±—ñ–¥'],
            'work': ['—Ä–æ–±–æ—Ç–∞', '–ø—Ä–∞—Ü—é—é', '–∑—É—Å—Ç—Ä—ñ—á', '–º—ñ—Ç–∏–Ω–≥', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–≤–¥–∞–Ω–Ω—è'],
            'exercise': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', '–±—ñ–≥', '–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è', '–≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è', '–∑–∞–ª'],
            'rest': ['–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫', '–ø–µ—Ä–µ—Ä–≤–∞', '–¥–∏–≤–ª—é—Å—è', '—á–∏—Ç–∞—é', '—Å–ª—É—Ö–∞—é'],
            'cleaning': ['–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è', '–º–∏—Ç—Ç—è', '–ø—Ä–∞–Ω–Ω—è', '–ø–æ—Ä—è–¥–æ–∫'],
            'meeting': ['–∑—É—Å—Ç—Ä—ñ—á –∑', '–±–∞—á–∏–≤—Å—è –∑', '—Ä–æ–∑–º–æ–≤–∞ –∑'],
            'drink': ['–ø\'—é', '–≤–∏–ø–∏–≤', '–∫–∞–≤–∞', '—á–∞–π', '–≤–æ–¥–∞']
        }

    async def detect_activity_type(self, text: str) -> Dict:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()

        # –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        for activity_type, keywords in self.activity_types.items():
            for keyword in keywords:
                if keyword in text_lower:
                    details = await self._extract_details(text, activity_type)
                    return {
                        'type': activity_type,
                        'subtype': details.get('subtype', ''),
                        'details': details,
                        'auto_detected': True
                    }

        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI
        ai_result = await self._analyze_with_ai(text)
        return ai_result

    async def _extract_details(self, text: str, activity_type: str) -> Dict:
        """–í–∏—Ç—è–≥—É—î –¥–µ—Ç–∞–ª—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        details = {'description': text}

        if activity_type == 'meal':
            food_items = await self._extract_food_items(text)
            details['food_items'] = food_items
            details['subtype'] = self._detect_meal_type(text)

        elif activity_type == 'exercise':
            exercise_info = await self._extract_exercise_info(text)
            details.update(exercise_info)

        elif activity_type == 'meeting':
            people = self._extract_people(text)
            details['people'] = people

        elif activity_type == 'drink':
            drink_info = self._extract_drink_info(text)
            details.update(drink_info)

        return details

    async def _extract_food_items(self, text: str) -> List[str]:
        """–í–∏—Ç—è–≥—É—î –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
        common_foods = ['–∫—É—Ä–∫–∞', '–º–∞–∫–∞—Ä–æ–Ω', '—Ä–∏—Å', '–∫–∞—Ä—Ç–æ–ø–ª—è', '–º\'—è—Å–æ', '—Ä–∏–±–∞', '–æ–≤–æ—á—ñ']
        found_foods = []

        for food in common_foods:
            if food in text.lower():
                found_foods.append(food)

        return found_foods

    def _detect_meal_type(self, text: str) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ"""
        text_lower = text.lower()
        if any(word in text_lower for word in ['—Å–Ω—ñ–¥–∞–Ω–æ–∫', '—Ä–∞–Ω–æ–∫']):
            return 'breakfast'
        elif any(word in text_lower for word in ['–æ–±—ñ–¥', '–ª–∞–Ω—á']):
            return 'lunch'
        elif any(word in text_lower for word in ['–≤–µ—á–µ—Ä—è', '–≤–µ—á—ñ—Ä']):
            return 'dinner'
        else:
            return 'snack'

    async def _extract_exercise_info(self, text: str) -> Dict:
        """–í–∏—Ç—è–≥—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–ø—Ä–∞–≤–∏"""
        numbers = re.findall(r'\d+', text)
        repetitions = int(numbers[0]) if numbers else 0

        exercise_types = {
            '–ø—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è': 'squats',
            '–≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è': 'push-ups',
            '–±—ñ–≥': 'running',
            '–ø–ª–∞–Ω–∫–∞': 'plank'
        }

        exercise_type = 'general'
        for ukr_name, eng_name in exercise_types.items():
            if ukr_name in text.lower():
                exercise_type = eng_name
                break

        return {
            'exercise_type': exercise_type,
            'repetitions': repetitions
        }

    def _extract_people(self, text: str) -> List[str]:
        """–í–∏—Ç—è–≥—É—î —ñ–º–µ–Ω–∞ –ª—é–¥–µ–π –∑ —Ç–µ–∫—Å—Ç—É"""
        people = []
        if ' –∑ ' in text.lower():
            parts = text.lower().split(' –∑ ')
            if len(parts) > 1:
                person = parts[1].split()[0]
                people.append(person)

        return people

    def _extract_drink_info(self, text: str) -> Dict:
        """–í–∏—Ç—è–≥—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞–ø–æ—ó"""
        drink_types = {
            '–≤–æ–¥–∞': 'water',
            '–∫–∞–≤–∞': 'coffee',
            '—á–∞–π': 'tea'
        }

        drink_type = 'water'
        for ukr_name, eng_name in drink_types.items():
            if ukr_name in text.lower():
                drink_type = eng_name
                break

        numbers = re.findall(r'\d+', text)
        amount = int(numbers[0]) if numbers else 1

        return {
            'drink_type': drink_type,
            'amount': amount
        }

    async def _analyze_with_ai(self, text: str) -> Dict:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Abacus ChatLLM API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫–ª–∞–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–∑–Ω–∞—á:
            1. –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (meal, work, rest, meeting, cleaning, exercise, drink, other)
            2. –ü—ñ–¥—Ç–∏–ø (—è–∫—â–æ —î)
            3. –î–µ—Ç–∞–ª—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

            –¢–µ–∫—Å—Ç: "{text}"

            –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
            {{
                "type": "—Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
                "subtype": "–ø—ñ–¥—Ç–∏–ø",
                "details": {{"description": "–æ–ø–∏—Å", "–¥–æ–¥–∞—Ç–∫–æ–≤—ñ_–ø–æ–ª—è": "–∑–Ω–∞—á–µ–Ω–Ω—è"}},
                "auto_detected": false
            }}
            """

            response = requests.post(
                ABACUS_API_URL,
                headers={
                    'Authorization': f'Bearer {ABACUS_API_KEY}',
                    'Content-Type': 'application/json'
                },
                json={
                    'messages': [{'role': 'user', 'content': prompt}],
                    'model': 'claude-3-sonnet'
                }
            )

            if response.status_code == 200:
                ai_response = response.json()
                content = ai_response['choices'][0]['message']['content']

                try:
                    result = json.loads(content)
                    return result
                except json.JSONDecodeError:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {content}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É AI API: {e}")

        # Fallback
        return {
            'type': 'other',
            'subtype': '',
            'details': {'description': text},
            'auto_detected': False
        }

class AnalyticsManager:
    """–ú–æ–¥—É–ª—å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –¥–ª—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    @staticmethod
    async def get_daily_summary(user_id: str, date: str = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('date', '==', date).stream()
        
        activity_counts = {}
        total_activities = 0
        
        for activity in activities:
            data = activity.to_dict()
            activity_type = data['type']
            activity_counts[activity_type] = activity_counts.get(activity_type, 0) + 1
            total_activities += 1
        
        if total_activities == 0:
            return f"üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ {date}:\n–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π."
        
        summary = f"üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ {date}:\n"
        summary += f"üìä –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {total_activities}\n\n"
        
        for activity_type, count in activity_counts.items():
            emoji = {'meal': 'üçΩ', 'work': 'üíº', 'exercise': 'üí™', 'rest': 'üò¥', 'drink': 'ü•§'}.get(activity_type, 'üìù')
            summary += f"{emoji} {activity_type}: {count}\n"
        
        return summary

    @staticmethod
    async def get_weekly_summary(user_id: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('timestamp', '>=', start_date).where('timestamp', '<=', end_date).stream()
        
        daily_counts = {}
        activity_totals = {}
        
        for activity in activities:
            data = activity.to_dict()
            date = data['date']
            activity_type = data['type']
            
            if date not in daily_counts:
                daily_counts[date] = 0
            daily_counts[date] += 1
            
            activity_totals[activity_type] = activity_totals.get(activity_type, 0) + 1
        
        summary = f"üìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è ({start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m')}):\n\n"
        
        if not daily_counts:
            return summary + "–ù–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å."
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –¥–µ–Ω—å
        most_active_day = max(daily_counts, key=daily_counts.get)
        summary += f"üî• –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–π –¥–µ–Ω—å: {most_active_day} ({daily_counts[most_active_day]} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)\n\n"
        
        # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        summary += "üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:\n"
        for activity_type, count in sorted(activity_totals.items(), key=lambda x: x[1], reverse=True)[:5]:
            emoji = {'meal': 'üçΩ', 'work': 'üíº', 'exercise': 'üí™', 'rest': 'üò¥', 'drink': 'ü•§'}.get(activity_type, 'üìù')
            summary += f"{emoji} {activity_type}: {count}\n"
        
        return summary

    @staticmethod
    async def get_diet_analysis(user_id: str, days: int = 7) -> str:
        """–ê–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('type', '==', 'meal').where('timestamp', '>=', start_date).stream()
        
        meal_types = {}
        food_items = {}
        total_meals = 0
        
        for activity in activities:
            data = activity.to_dict()
            subtype = data.get('subtype', 'unknown')
            meal_types[subtype] = meal_types.get(subtype, 0) + 1
            total_meals += 1
            
            # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
            details = data.get('details', {})
            if 'food_items' in details:
                for food in details['food_items']:
                    food_items[food] = food_items.get(food, 0) + 1
        
        if total_meals == 0:
            return f"üçΩ –ê–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É –∑–∞ {days} –¥–Ω—ñ–≤:\n–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ —ó–∂—É."
        
        analysis = f"üçΩ –ê–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É –∑–∞ {days} –¥–Ω—ñ–≤:\n"
        analysis += f"üìä –í—Å—å–æ–≥–æ –ø—Ä–∏–π–æ–º—ñ–≤ —ó–∂—ñ: {total_meals}\n\n"
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö –ø—Ä–∏–π–æ–º—ñ–≤ —ó–∂—ñ
        analysis += "üïê –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —á–∞—Å—É:\n"
        for meal_type, count in meal_types.items():
            emoji = {'breakfast': 'üåÖ', 'lunch': '‚òÄÔ∏è', 'dinner': 'üåô', 'snack': 'üç™'}.get(meal_type, 'üçΩ')
            analysis += f"{emoji} {meal_type}: {count}\n"
        
        # –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        if food_items:
            analysis += "\nü•ó –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø—Ä–æ–¥—É–∫—Ç–∏:\n"
            for food, count in sorted(food_items.items(), key=lambda x: x[1], reverse=True)[:5]:
                analysis += f"‚Ä¢ {food}: {count} —Ä–∞–∑—ñ–≤\n"
        
        return analysis

    @staticmethod
    async def get_exercise_analysis(user_id: str, days: int = 7) -> str:
        """–ê–Ω–∞–ª—ñ–∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('type', '==', 'exercise').where('timestamp', '>=', start_date).stream()
        
        exercise_types = {}
        total_repetitions = 0
        total_sessions = 0
        
        for activity in activities:
            data = activity.to_dict()
            details = data.get('details', {})
            exercise_type = details.get('exercise_type', 'general')
            repetitions = details.get('repetitions', 0)
            
            exercise_types[exercise_type] = exercise_types.get(exercise_type, 0) + 1
            total_repetitions += repetitions
            total_sessions += 1
        
        if total_sessions == 0:
            return f"üí™ –ê–Ω–∞–ª—ñ–∑ –≤–ø—Ä–∞–≤ –∑–∞ {days} –¥–Ω—ñ–≤:\n–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ —Ñ—ñ–∑–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏."
        
        analysis = f"üí™ –ê–Ω–∞–ª—ñ–∑ –≤–ø—Ä–∞–≤ –∑–∞ {days} –¥–Ω—ñ–≤:\n"
        analysis += f"üèÉ‚Äç‚ôÇÔ∏è –í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {total_sessions}\n"
        analysis += f"üî¢ –í—Å—å–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å: {total_repetitions}\n\n"
        
        # –¢–æ–ø –≤–ø—Ä–∞–≤
        analysis += "üèÜ –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –≤–ø—Ä–∞–≤–∏:\n"
        for exercise, count in sorted(exercise_types.items(), key=lambda x: x[1], reverse=True):
            analysis += f"‚Ä¢ {exercise}: {count} —Ä–∞–∑—ñ–≤\n"
        
        return analysis

class MoodTracker:
    """–¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ—é"""
    
    @staticmethod
    async def save_mood(user_id: str, mood: str, note: str = ""):
        """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        mood_doc = {
            'user_id': user_id,
            'mood': mood,
            'note': note,
            'timestamp': datetime.utcnow(),
            'date': datetime.now().strftime('%Y-%m-%d')
        }
        
        db.collection('moods').add(mood_doc)

    @staticmethod
    async def get_mood_stats(user_id: str, days: int = 7) -> str:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        moods = db.collection('moods').where('user_id', '==', user_id).where('timestamp', '>=', start_date).stream()
        
        mood_counts = {}
        total_entries = 0
        
        for mood_entry in moods:
            data = mood_entry.to_dict()
            mood = data['mood']
            mood_counts[mood] = mood_counts.get(mood, 0) + 1
            total_entries += 1
        
        if total_entries == 0:
            return f"üòä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é –∑–∞ {days} –¥–Ω—ñ–≤:\n–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π."
        
        stats = f"üòä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é –∑–∞ {days} –¥–Ω—ñ–≤:\n"
        stats += f"üìä –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_entries}\n\n"
        
        for mood, count in sorted(mood_counts.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_entries) * 100
            emoji = {'–≤—ñ–¥–º—ñ–Ω–Ω–æ': 'üòÑ', '–¥–æ–±—Ä–µ': 'üòä', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ': 'üòê', '–ø–æ–≥–∞–Ω–æ': 'üòî', '–∂–∞—Ö–ª–∏–≤–æ': 'üò¢'}.get(mood, 'üòä')
            stats += f"{emoji} {mood}: {count} ({percentage:.1f}%)\n"
        
        return stats

class WaterTracker:
    """–¢—Ä–µ–∫–µ—Ä –≤–æ–¥–∏ —Ç–∞ –Ω–∞–ø–æ—ó–≤"""
    
    @staticmethod
    async def get_water_stats(user_id: str, date: str = None) -> str:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è –≤–æ–¥–∏ –∑–∞ –¥–µ–Ω—å"""
        if not date:
            date = datetime.now().strftime('%Y-%m-%d')
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('type', '==', 'drink').where('date', '==', date).stream()
        
        drink_totals = {'water': 0, 'coffee': 0, 'tea': 0}
        
        for activity in activities:
            data = activity.to_dict()
            details = data.get('details', {})
            drink_type = details.get('drink_type', 'water')
            amount = details.get('amount', 1)
            
            if drink_type in drink_totals:
                drink_totals[drink_type] += amount
        
        stats = f"ü•§ –°–ø–æ–∂–∏–≤–∞–Ω–Ω—è –Ω–∞–ø–æ—ó–≤ –∑–∞ {date}:\n"
        stats += f"üíß –í–æ–¥–∞: {drink_totals['water']} —Å–∫–ª—è–Ω–æ–∫\n"
        stats += f"‚òï –ö–∞–≤–∞: {drink_totals['coffee']} —á–∞—à–æ–∫\n"
        stats += f"üçµ –ß–∞–π: {drink_totals['tea']} —á–∞—à–æ–∫\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if drink_totals['water'] < 8:
            stats += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –≤–∏–ø–∏–π —â–µ {8 - drink_totals['water']} —Å–∫–ª—è–Ω–æ–∫ –≤–æ–¥–∏!"
        
        return stats

class GoalsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ü—ñ–ª–µ–π"""
    
    @staticmethod
    async def check_goals(user_id: str) -> str:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–æ–≥—Ä–µ—Å –ø–æ —Ü—ñ–ª—è—Ö"""
        user_ref = db.collection('users').document(user_id)
        user_doc = user_ref.get()
        
        if not user_doc.exists:
            return "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π."
        
        user_data = user_doc.to_dict()
        goals = user_data.get('goals', {})
        
        if not goals:
            return "üéØ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /settings –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ –ø–æ —Å–ø–æ—Ä—Ç—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
        exercise_goal = goals.get('exercise_per_week', 0)
        if exercise_goal > 0:
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            end_date = datetime.now()
            start_date = end_date - timedelta(days=7)
            
            exercises = db.collection('activities').where('user_id', '==', user_id).where('type', '==', 'exercise').where('timestamp', '>=', start_date).stream()
            exercise_count = len(list(exercises))
            
            progress = f"üèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç: {exercise_count}/{exercise_goal} —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"
            if exercise_count >= exercise_goal:
                progress += " ‚úÖ"
            else:
                progress += f" (–∑–∞–ª–∏—à–∏–ª–æ—Å—å: {exercise_goal - exercise_count})"
        
        return f"üéØ –ü—Ä–æ–≥—Ä–µ—Å –ø–æ —Ü—ñ–ª—è—Ö:\n{progress}"

class ExportManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö"""
    
    @staticmethod
    async def export_activities_csv(user_id: str, days: int = 30) -> io.StringIO:
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É CSV"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        
        activities = db.collection('activities').where('user_id', '==', user_id).where('timestamp', '>=', start_date).stream()
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(['–î–∞—Ç–∞', '–ß–∞—Å', '–¢–∏–ø', '–ü—ñ–¥—Ç–∏–ø', '–û–ø–∏—Å', '–î–µ—Ç–∞–ª—ñ'])
        
        for activity in activities:
            data = activity.to_dict()
            timestamp = data.get('timestamp', datetime.now())
            writer.writerow([
                timestamp.strftime('%Y-%m-%d'),
                timestamp.strftime('%H:%M'),
                data.get('type', ''),
                data.get('subtype', ''),
                data.get('raw_text', ''),
                str(data.get('details', {}))
            ])
        
        output.seek(0)
        return output

class ReminderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    
    @staticmethod
    async def check_inactivity(user_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –±—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É"""
        one_hour_ago = datetime.now() - timedelta(hours=1)
        
        recent_activities = db.collection('activities').where('user_id', '==', user_id).where('timestamp', '>=', one_hour_ago).limit(1).stream()
        
        return len(list(recent_activities)) == 0

    @staticmethod
    async def should_ask_mood(user_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Ç—Ä–µ–±–∞ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        mood_today = db.collection('moods').where('user_id', '==', user_id).where('date', '==', today).limit(1).stream()
        
        return len(list(mood_today)) == 0

class UserManager:
    @staticmethod
    async def get_or_create_user(telegram_user: types.User) -> Dict:
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Firestore"""
        user_ref = db.collection('users').document(str(telegram_user.id))
        user_doc = user_ref.get()

        if user_doc.exists:
            return user_doc.to_dict()

        user_data = {
            'telegram_id': str(telegram_user.id),
            'username': telegram_user.username or '',
            'first_name': telegram_user.first_name or '',
            'created_at': datetime.utcnow(),
            'settings': {
                'reminder_interval': 60,
                'timezone': 'Europe/Kiev',
                'daily_summary_time': '23:00',
                'mood_tracking': True,
                'water_goal': 8,
                'language': 'uk'
            },
            'goals': {
                'exercise_per_week': 3,
                'no_sweets_days': 5
            }
        }

        user_ref.set(user_data)
        return user_data

    @staticmethod
    async def save_activity(user_id: str, activity_data: Dict, raw_text: str):
        """–ó–±–µ—Ä—ñ–≥–∞—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ Firestore"""
        now = datetime.utcnow()

        # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        time_match = re.match(r'^(\d{1,2}):(\d{2})', raw_text.strip())
        if time_match:
            hour, minute = int(time_match.group(1)), int(time_match.group(2))
            today = datetime.now().date()
            activity_time = datetime.combine(today, datetime.min.time().replace(hour=hour, minute=minute))
        else:
            activity_time = now

        activity_doc = {
            'user_id': user_id,
            'timestamp': activity_time,
            'date': activity_time.strftime('%Y-%m-%d'),
            'type': activity_data['type'],
            'subtype': activity_data['subtype'],
            'details': activity_data['details'],
            'raw_text': raw_text,
            'mood': '',
            'auto_detected': activity_data['auto_detected'],
            'created_at': now
        }

        db.collection('activities').add(activity_doc)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–∫–µ—Ä–∞
tracker = ActivityTracker()

# === –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê ===

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = await UserManager.get_or_create_user(message.from_user)

    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤—ñ—Ç, {user['first_name']}!

–Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π. 

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–µ–Ω—ñ, —â–æ —Ç–∏ —Ä–æ–±–∏—à, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
‚Ä¢ "12:45 —Ä–æ–±–ª—é –æ–±—ñ–¥, –∫—É—Ä–∫—É —ñ –º–∞–∫–∞—Ä–æ–Ω"
‚Ä¢ "14:00 –ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º"
‚Ä¢ "15:30 –∑—Ä–æ–±–∏–≤ 20 –ø—Ä–∏—Å—ñ–¥–∞–Ω—å"

üìã **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/help - –ø–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞
/summary - –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è/—Ç–∏–∂–Ω—è
/diet - –∞–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É
/exercise - –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤
/mood - —Ç—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ—é
/water - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ—ó–≤
/goals - –ø—Ä–æ–≥—Ä–µ—Å –ø–æ —Ü—ñ–ª—è—Ö
/challenge - –º—ñ–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂
/export - –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    """

    await message.answer(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

**–û—Å–Ω–æ–≤–Ω—ñ:**
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:**
/summary - –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è/—Ç–∏–∂–Ω—è
/stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/diet - –∞–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É
/exercise - –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤

**–¢—Ä–µ–∫—ñ–Ω–≥:**
/mood - –∑–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π
/water - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ—ó–≤
/goals - –ø—Ä–æ–≥—Ä–µ—Å –ø–æ —Ü—ñ–ª—è—Ö

**–î–æ–¥–∞—Ç–∫–æ–≤—ñ:**
/challenge - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂
/export - –µ–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —É CSV
/groupstats - –≥—Ä—É–ø–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞

**–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ!
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ –¥–µ—Ç–∞–ª—ñ.
    """

    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("summary"))
async def cmd_summary(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /summary - –ø—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è/—Ç–∏–∂–Ω—è"""
    user_id = str(message.from_user.id)
    
    # –ü—ñ–¥—Å—É–º–æ–∫ –¥–Ω—è
    daily_summary = await AnalyticsManager.get_daily_summary(user_id)
    
    # –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∏–∂–Ω—è
    weekly_summary = await AnalyticsManager.get_weekly_summary(user_id)
    
    full_summary = f"{daily_summary}\n\n{weekly_summary}"
    
    await message.answer(full_summary)

@dp.message(Command("diet"))
async def cmd_diet(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /diet - –∞–Ω–∞–ª—ñ–∑ —Ä–∞—Ü—ñ–æ–Ω—É"""
    user_id = str(message.from_user.id)
    
    diet_analysis = await AnalyticsManager.get_diet_analysis(user_id, days=7)
    
    await message.answer(diet_analysis)

@dp.message(Command("exercise"))
async def cmd_exercise(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /exercise - –∞–Ω–∞–ª—ñ–∑ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤"""
    user_id = str(message.from_user.id)
    
    exercise_analysis = await AnalyticsManager.get_exercise_analysis(user_id, days=7)
    
    await message.answer(exercise_analysis)

@dp.message(Command("mood"))
async def cmd_mood(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /mood - —Ç—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ—é"""
    await message.answer(
        "üòä –Ø–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ?\n\n"
        "–í—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: /mood [–Ω–∞—Å—Ç—Ä—ñ–π] [–ø—Ä–∏–º—ñ—Ç–∫–∞]\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /mood –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é–≤–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ\n\n"
        "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞—Å—Ç—Ä–æ—é: –≤—ñ–¥–º—ñ–Ω–Ω–æ, –¥–æ–±—Ä–µ, –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–≥–∞–Ω–æ, –∂–∞—Ö–ª–∏–≤–æ"
    )

@dp.message(Command("water"))
async def cmd_water(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /water - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ—ó–≤"""
    user_id = str(message.from_user.id)
    
    water_stats = await WaterTracker.get_water_stats(user_id)
    
    await message.answer(water_stats)

@dp.message(Command("goals"))
async def cmd_goals(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /goals - –ø—Ä–æ–≥—Ä–µ—Å –ø–æ —Ü—ñ–ª—è—Ö"""
    user_id = str(message.from_user.id)
    
    goals_progress = await GoalsManager.check_goals(user_id)
    
    await message.answer(goals_progress)

@dp.message(Command("challenge"))
async def cmd_challenge(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /challenge - –º—ñ–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂"""
    challenge = random.choice(CHALLENGES)
    
    await message.answer(f"üéØ **–ú—ñ–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è —Ç–µ–±–µ:**\n\n{challenge}\n\n–ì–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫? üí™")

@dp.message(Command("export"))
async def cmd_export(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /export - –µ–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —É CSV"""
    user_id = str(message.from_user.id)
    
    try:
        csv_data = await ExportManager.export_activities_csv(user_id, days=30)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        csv_content = csv_data.getvalue()
        csv_file = io.BytesIO(csv_content.encode('utf-8'))
        csv_file.name = f"activities_{datetime.now().strftime('%Y%m%d')}.csv"
        
        await message.answer_document(
            InputFile(csv_file, filename=csv_file.name),
            caption="üìä –¢–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ CSV"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

@dp.message(Command("groupstats"))
async def cmd_groupstats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /groupstats - –≥—Ä—É–ø–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)"""
    # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –ø–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_count = len(list(db.collection('users').stream()))
    
    stats = f"üë• **–ì—Ä—É–ø–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
    stats += f"üë§ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
    stats += f"üìä –¢–∏ —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞!\n\n"
    stats += f"üí° –ë—ñ–ª—å—à–µ –≥—Ä—É–ø–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ."
    
    await message.answer(stats, parse_mode="Markdown")

@dp.message(Command("settings"))
async def cmd_settings(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    settings_text = """
‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞:**

–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∫–æ–∂–Ω—ñ 60 —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: Europe/Kiev
‚Ä¢ –ß–∞—Å –ø—ñ–¥—Å—É–º–∫—É –¥–Ω—è: 23:00
‚Ä¢ –¢—Ä–µ–∫—ñ–Ω–≥ –Ω–∞—Å—Ç—Ä–æ—é: —É–≤—ñ–º–∫–Ω–µ–Ω–æ
‚Ä¢ –¶—ñ–ª—å –ø–æ –≤–æ–¥—ñ: 8 —Å–∫–ª—è–Ω–æ–∫ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞

üéØ **–¶—ñ–ª—ñ:**
‚Ä¢ –°–ø–æ—Ä—Ç: 3 —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
‚Ä¢ –ë–µ–∑ —Å–æ–ª–æ–¥–∫–æ–≥–æ: 5 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å

üí° –î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–ø–∏—à–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ).
    """
    
    await message.answer(settings_text, parse_mode="Markdown")

@dp.message()
async def handle_activity(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —è–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
    try:
        user = await UserManager.get_or_create_user(message.from_user)
        user_id = str(message.from_user.id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ—é
        if message.text.startswith('/mood '):
            parts = message.text[6:].split(' ', 1)
            mood = parts[0]
            note = parts[1] if len(parts) > 1 else ""
            
            await MoodTracker.save_mood(user_id, mood, note)
            await message.answer(f"üòä –ó–∞–ø–∏—Å–∞–≤ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: {mood}")
            return
        
        # –ó–≤–∏—á–∞–π–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        activity_data = await tracker.detect_activity_type(message.text)

        await UserManager.save_activity(
            user_id,
            activity_data,
            message.text
        )

        response = f"‚úÖ –ó–∞–ø–∏—Å–∞–≤: {activity_data['type']}"
        if activity_data['subtype']:
            response += f" ({activity_data['subtype']})"

        if activity_data['type'] == 'meal' and activity_data['details'].get('food_items'):
            foods = ', '.join(activity_data['details']['food_items'])
            response += f"\nüçΩ –ü—Ä–æ–¥—É–∫—Ç–∏: {foods}"

        elif activity_data['type'] == 'exercise':
            if activity_data['details'].get('repetitions'):
                response += f"\nüí™ {activity_data['details']['repetitions']} –ø–æ–≤—Ç–æ—Ä–µ–Ω—å"

        elif activity_data['type'] == 'drink':
            drink_type = activity_data['details'].get('drink_type', '–Ω–∞–ø—ñ–π')
            amount = activity_data['details'].get('amount', 1)
            response += f"\nü•§ {amount} {drink_type}"

        await message.answer(response)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
        await check_reminders(user_id, message)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

async def check_reminders(user_id: str, message: Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        if await ReminderManager.check_inactivity(user_id):
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                await message.answer("‚è∞ –¢–∏ –¥–∞–≤–Ω–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞–ø–∏—Å—É–≤–∞–≤. –Ø–∫ —Å–ø—Ä–∞–≤–∏? –ú–æ–∂–µ, —á–∞—Å –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ—Ä–≤—É –∞–±–æ –≤–∏–ø–∏—Ç–∏ –≤–æ–¥–∏? üíß")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Å—Ç—Ä—ñ–π
        if await ReminderManager.should_ask_mood(user_id):
            if random.random() < 0.2:  # 20% —à–∞–Ω—Å –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π
                await message.answer("üòä –Ø–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Å—å–æ–≥–æ–¥–Ω—ñ? –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /mood —â–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏!")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
